name: Deploy to Minikube with ngrok

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Minikube and kubectl
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          # Install Minikube
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          
          # Start Minikube
          minikube start --driver=docker
          minikube addons enable ingress

      - name: Build and load Docker image
        run: |
          # Build the image directly with Minikube's Docker daemon
          eval $(minikube -p minikube docker-env)
          docker build -t starting-docker-app:local .
          docker images

      - name: Deploy to Minikube
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace starting-docker --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/ -n starting-docker
          
          # Wait for deployments to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/app -n starting-docker || true
          kubectl wait --for=condition=available --timeout=300s deployment/postgres -n starting-docker || true

      - name: Install and configure ngrok
        if: success()
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          # Install ngrok
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          
          # Start ngrok in background
          kubectl port-forward -n starting-docker svc/app-service 8080:8080 --address=0.0.0.0 > /dev/null 2>&1 &
          sleep 5
          
          # Start ngrok
          ngrok http 8080 --log=stdout > /dev/null &
          sleep 5
          
          # Get the public URL
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "ngrok_url=$NGROK_URL" >> $GITHUB_OUTPUT
          echo "Public URL: $NGROK_URL"

      - name: Show deployment info
        if: success()
        run: |
          echo "## 🚀 Application Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Public URL" >> $GITHUB_STEP_SUMMARY
          echo "- [Open Application]($NGROK_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- [Health Check]($NGROK_URL/actuator/health)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Kubernetes Resources" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "kubectl get all -n starting-docker" >> $GITHUB_STEP_SUMMARY
          kubectl get all -n starting-docker >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo '```' >> $GITHUB_STEP_SUMMARY